/*
 * generated by Xtext 2.16.0
 */
grammar InternalArduinoML;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package arduinoML.concretesyntax.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package arduinoML.concretesyntax.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import arduinoML.concretesyntax.services.ArduinoMLGrammarAccess;

}

@parser::members {

 	private ArduinoMLGrammarAccess grammarAccess;

    public InternalArduinoMLParser(TokenStream input, ArduinoMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "App";
   	}

   	@Override
   	protected ArduinoMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleApp
entryRuleApp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAppRule()); }
	iv_ruleApp=ruleApp
	{ $current=$iv_ruleApp.current; }
	EOF;

// Rule App
ruleApp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='app'
			{
				newLeafNode(otherlv_0, grammarAccess.getAppAccess().getAppKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getNameEStringParserRuleCall_0_1_0());
					}
					lv_name_1_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						set(
							$current,
							"name",
							lv_name_1_0,
							"arduinoML.concretesyntax.ArduinoML.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='initial'
			{
				newLeafNode(otherlv_2, grammarAccess.getAppAccess().getInitialKeyword_0_2());
			}
			otherlv_3='mode'
			{
				newLeafNode(otherlv_3, grammarAccess.getAppAccess().getModeKeyword_0_3());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAppRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getAppAccess().getInitial_modeModeCrossReference_0_4_0());
					}
					ruleEString
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getAppAccess().getColonKeyword_0_5());
			}
			otherlv_6='bricks'
			{
				newLeafNode(otherlv_6, grammarAccess.getAppAccess().getBricksKeyword_0_6());
			}
			otherlv_7=':'
			{
				newLeafNode(otherlv_7, grammarAccess.getAppAccess().getColonKeyword_0_7());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_0_8_0());
					}
					lv_bricks_8_0=ruleBrick
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						add(
							$current,
							"bricks",
							lv_bricks_8_0,
							"arduinoML.concretesyntax.ArduinoML.Brick");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_0_9_0());
					}
					lv_bricks_9_0=ruleBrick
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						add(
							$current,
							"bricks",
							lv_bricks_9_0,
							"arduinoML.concretesyntax.ArduinoML.Brick");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_10='modes'
			{
				newLeafNode(otherlv_10, grammarAccess.getAppAccess().getModesKeyword_0_10());
			}
			otherlv_11=':'
			{
				newLeafNode(otherlv_11, grammarAccess.getAppAccess().getColonKeyword_0_11());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getModesModeParserRuleCall_0_12_0());
					}
					lv_modes_12_0=ruleMode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						add(
							$current,
							"modes",
							lv_modes_12_0,
							"arduinoML.concretesyntax.ArduinoML.Mode");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getModesModeParserRuleCall_0_13_0());
					}
					lv_modes_13_0=ruleMode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						add(
							$current,
							"modes",
							lv_modes_13_0,
							"arduinoML.concretesyntax.ArduinoML.Mode");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		    |
		(
			otherlv_14='app'
			{
				newLeafNode(otherlv_14, grammarAccess.getAppAccess().getAppKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAppAccess().getModesModeParserRuleCall_1_1_0());
					}
					lv_modes_15_0=ruleMode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAppRule());
						}
						add(
							$current,
							"modes",
							lv_modes_15_0,
							"arduinoML.concretesyntax.ArduinoML.Mode");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleBrick
entryRuleBrick returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBrickRule()); }
	iv_ruleBrick=ruleBrick
	{ $current=$iv_ruleBrick.current; }
	EOF;

// Rule Brick
ruleBrick returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBrickAccess().getActuatorParserRuleCall_0_0());
			}
			this_Actuator_0=ruleActuator
			{
				$current = $this_Actuator_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getBrickAccess().getDigitalParserRuleCall_0_1());
			}
			this_Digital_1=ruleDigital
			{
				$current = $this_Digital_1.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getBrickAccess().getAnalogParserRuleCall_0_2());
			}
			this_Analog_2=ruleAnalog
			{
				$current = $this_Analog_2.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBrickAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBrickRule());
					}
					set(
						$current,
						"name",
						lv_name_3_0,
						"arduinoML.concretesyntax.ArduinoML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getBrickAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBrickAccess().getPinEIntParserRuleCall_3_0());
				}
				lv_pin_5_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBrickRule());
					}
					set(
						$current,
						"pin",
						lv_pin_5_0,
						"arduinoML.concretesyntax.ArduinoML.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleMode
entryRuleMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModeRule()); }
	iv_ruleMode=ruleMode
	{ $current=$iv_ruleMode.current; }
	EOF;

// Rule Mode
ruleMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModeAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModeRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"arduinoML.concretesyntax.ArduinoML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='initial'
		{
			newLeafNode(otherlv_1, grammarAccess.getModeAccess().getInitialKeyword_1());
		}
		otherlv_2='state'
		{
			newLeafNode(otherlv_2, grammarAccess.getModeAccess().getStateKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getModeAccess().getInitialStateCrossReference_3_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getModeAccess().getColonKeyword_4());
		}
		(
			otherlv_5='bricks'
			{
				newLeafNode(otherlv_5, grammarAccess.getModeAccess().getBricksKeyword_5_0());
			}
			otherlv_6=':'
			{
				newLeafNode(otherlv_6, grammarAccess.getModeAccess().getColonKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getBricksBrickParserRuleCall_5_2_0());
					}
					lv_bricks_7_0=ruleBrick
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"bricks",
							lv_bricks_7_0,
							"arduinoML.concretesyntax.ArduinoML.Brick");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getBricksBrickParserRuleCall_5_3_0());
					}
					lv_bricks_8_0=ruleBrick
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"bricks",
							lv_bricks_8_0,
							"arduinoML.concretesyntax.ArduinoML.Brick");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_9='states'
		{
			newLeafNode(otherlv_9, grammarAccess.getModeAccess().getStatesKeyword_6());
		}
		otherlv_10=':'
		{
			newLeafNode(otherlv_10, grammarAccess.getModeAccess().getColonKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModeAccess().getStatesStateParserRuleCall_8_0());
				}
				lv_states_11_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModeRule());
					}
					add(
						$current,
						"states",
						lv_states_11_0,
						"arduinoML.concretesyntax.ArduinoML.State");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModeAccess().getStatesStateParserRuleCall_9_0());
				}
				lv_states_12_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModeRule());
					}
					add(
						$current,
						"states",
						lv_states_12_0,
						"arduinoML.concretesyntax.ArduinoML.State");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_13='transitions'
			{
				newLeafNode(otherlv_13, grammarAccess.getModeAccess().getTransitionsKeyword_10_0());
			}
			otherlv_14=':'
			{
				newLeafNode(otherlv_14, grammarAccess.getModeAccess().getColonKeyword_10_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getTransitions_modeTransitionModeParserRuleCall_10_2_0());
					}
					lv_transitions_mode_15_0=ruleTransitionMode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"transitions_mode",
							lv_transitions_mode_15_0,
							"arduinoML.concretesyntax.ArduinoML.TransitionMode");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getModeAccess().getTransitions_modeTransitionModeParserRuleCall_10_3_0());
					}
					lv_transitions_mode_16_0=ruleTransitionMode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModeRule());
						}
						add(
							$current,
							"transitions_mode",
							lv_transitions_mode_16_0,
							"arduinoML.concretesyntax.ArduinoML.TransitionMode");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
	)
;

// Entry rule entryRuleState
entryRuleState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current; }
	EOF;

// Rule State
ruleState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"arduinoML.concretesyntax.ArduinoML.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getStateAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getActionsActionParserRuleCall_2_0());
				}
				lv_actions_2_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					add(
						$current,
						"actions",
						lv_actions_2_0,
						"arduinoML.concretesyntax.ArduinoML.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getActionsActionParserRuleCall_3_0());
				}
				lv_actions_3_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					add(
						$current,
						"actions",
						lv_actions_3_0,
						"arduinoML.concretesyntax.ArduinoML.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getTransitions_stateTransitionStateParserRuleCall_4_0());
				}
				lv_transitions_state_4_0=ruleTransitionState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					add(
						$current,
						"transitions_state",
						lv_transitions_state_4_0,
						"arduinoML.concretesyntax.ArduinoML.TransitionState");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStateAccess().getTransitions_stateTransitionStateParserRuleCall_5_0());
				}
				lv_transitions_state_5_0=ruleTransitionState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateRule());
					}
					add(
						$current,
						"transitions_state",
						lv_transitions_state_5_0,
						"arduinoML.concretesyntax.ArduinoML.TransitionState");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getEIntAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleActuator
entryRuleActuator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActuatorRule()); }
	iv_ruleActuator=ruleActuator
	{ $current=$iv_ruleActuator.current; }
	EOF;

// Rule Actuator
ruleActuator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActuatorAccess().getActuatorAction_0(),
					$current);
			}
		)
		otherlv_1='Actuator'
		{
			newLeafNode(otherlv_1, grammarAccess.getActuatorAccess().getActuatorKeyword_1());
		}
	)
;

// Entry rule entryRuleDigital
entryRuleDigital returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDigitalRule()); }
	iv_ruleDigital=ruleDigital
	{ $current=$iv_ruleDigital.current; }
	EOF;

// Rule Digital
ruleDigital returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDigitalAccess().getDigitalAction_0(),
					$current);
			}
		)
		otherlv_1='Digital'
		{
			newLeafNode(otherlv_1, grammarAccess.getDigitalAccess().getDigitalKeyword_1());
		}
	)
;

// Entry rule entryRuleAnalog
entryRuleAnalog returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnalogRule()); }
	iv_ruleAnalog=ruleAnalog
	{ $current=$iv_ruleAnalog.current; }
	EOF;

// Rule Analog
ruleAnalog returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAnalogAccess().getAnalogAction_0(),
					$current);
			}
		)
		otherlv_1='Analog'
		{
			newLeafNode(otherlv_1, grammarAccess.getAnalogAccess().getAnalogKeyword_1());
		}
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='change'
		{
			newLeafNode(otherlv_0, grammarAccess.getActionAccess().getChangeKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getActionRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getActionAccess().getActuatorActuatorCrossReference_1_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='to'
		{
			newLeafNode(otherlv_2, grammarAccess.getActionAccess().getToKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActionAccess().getValueSignalEnumRuleCall_3_0());
				}
				lv_value_3_0=ruleSignal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActionRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"arduinoML.concretesyntax.ArduinoML.Signal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTransitionState
entryRuleTransitionState returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionStateRule()); }
	iv_ruleTransitionState=ruleTransitionState
	{ $current=$iv_ruleTransitionState.current; }
	EOF;

// Rule TransitionState
ruleTransitionState returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='when'
				{
					newLeafNode(otherlv_0, grammarAccess.getTransitionStateAccess().getWhenKeyword_0_0_0());
				}
				(
					(
						(
							(
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getTransitionStateRule());
									}
								}
								{
									newCompositeNode(grammarAccess.getTransitionStateAccess().getDigitalsDigitalCrossReference_0_0_1_0_0_0());
								}
								ruleEString
								{
									afterParserOrEnumRuleCall();
								}
							)
						)
						otherlv_2='is'
						{
							newLeafNode(otherlv_2, grammarAccess.getTransitionStateAccess().getIsKeyword_0_0_1_0_1());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getTransitionStateAccess().getD_valuesSignalEnumRuleCall_0_0_1_0_2_0());
								}
								lv_d_values_3_0=ruleSignal
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
									}
									add(
										$current,
										"d_values",
										lv_d_values_3_0,
										"arduinoML.concretesyntax.ArduinoML.Signal");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
					    |
					(
						(
							(
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getTransitionStateRule());
									}
								}
								{
									newCompositeNode(grammarAccess.getTransitionStateAccess().getAnalogsAnalogCrossReference_0_0_1_1_0_0());
								}
								ruleEString
								{
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getTransitionStateAccess().getCompCompareEnumRuleCall_0_0_1_1_1_0());
								}
								lv_comp_5_0=ruleCompare
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
									}
									add(
										$current,
										"comp",
										lv_comp_5_0,
										"arduinoML.concretesyntax.ArduinoML.Compare");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getTransitionStateAccess().getA_valuesEIntParserRuleCall_0_0_1_1_2_0());
								}
								lv_a_values_6_0=ruleEInt
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
									}
									add(
										$current,
										"a_values",
										lv_a_values_6_0,
										"arduinoML.concretesyntax.ArduinoML.EInt");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
				(
					otherlv_7='and'
					{
						newLeafNode(otherlv_7, grammarAccess.getTransitionStateAccess().getAndKeyword_0_0_2_0());
					}
					(
						(
							(
								(
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getTransitionStateRule());
										}
									}
									{
										newCompositeNode(grammarAccess.getTransitionStateAccess().getDigitalsDigitalCrossReference_0_0_2_1_0_0_0());
									}
									ruleEString
									{
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_9='is'
							{
								newLeafNode(otherlv_9, grammarAccess.getTransitionStateAccess().getIsKeyword_0_0_2_1_0_1());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getTransitionStateAccess().getD_valuesSignalEnumRuleCall_0_0_2_1_0_2_0());
									}
									lv_d_values_10_0=ruleSignal
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
										}
										add(
											$current,
											"d_values",
											lv_d_values_10_0,
											"arduinoML.concretesyntax.ArduinoML.Signal");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)
						    |
						(
							(
								(
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getTransitionStateRule());
										}
									}
									{
										newCompositeNode(grammarAccess.getTransitionStateAccess().getAnalogsAnalogCrossReference_0_0_2_1_1_0_0());
									}
									ruleEString
									{
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								(
									{
										newCompositeNode(grammarAccess.getTransitionStateAccess().getCompCompareEnumRuleCall_0_0_2_1_1_1_0());
									}
									lv_comp_12_0=ruleCompare
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
										}
										add(
											$current,
											"comp",
											lv_comp_12_0,
											"arduinoML.concretesyntax.ArduinoML.Compare");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								(
									{
										newCompositeNode(grammarAccess.getTransitionStateAccess().getA_valuesEIntParserRuleCall_0_0_2_1_1_2_0());
									}
									lv_a_values_13_0=ruleEInt
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
										}
										add(
											$current,
											"a_values",
											lv_a_values_13_0,
											"arduinoML.concretesyntax.ArduinoML.EInt");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)
					)
				)*
				(
					otherlv_14='wait'
					{
						newLeafNode(otherlv_14, grammarAccess.getTransitionStateAccess().getWaitKeyword_0_0_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTransitionStateAccess().getTimeEIntParserRuleCall_0_0_3_1_0());
							}
							lv_time_15_0=ruleEInt
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
								}
								set(
									$current,
									"time",
									lv_time_15_0,
									"arduinoML.concretesyntax.ArduinoML.EInt");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getTransitionStateAccess().getUnitTime_unitEnumRuleCall_0_0_3_2_0());
							}
							lv_unit_16_0=ruleTime_unit
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
								}
								set(
									$current,
									"unit",
									lv_unit_16_0,
									"arduinoML.concretesyntax.ArduinoML.Time_unit");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_17='then'
					{
						newLeafNode(otherlv_17, grammarAccess.getTransitionStateAccess().getThenKeyword_0_0_3_3());
					}
				)?
			)
			    |
			(
				otherlv_18='wait'
				{
					newLeafNode(otherlv_18, grammarAccess.getTransitionStateAccess().getWaitKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTransitionStateAccess().getTimeEIntParserRuleCall_0_1_1_0());
						}
						lv_time_19_0=ruleEInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
							}
							set(
								$current,
								"time",
								lv_time_19_0,
								"arduinoML.concretesyntax.ArduinoML.EInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getTransitionStateAccess().getUnitTime_unitEnumRuleCall_0_1_2_0());
						}
						lv_unit_20_0=ruleTime_unit
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTransitionStateRule());
							}
							set(
								$current,
								"unit",
								lv_unit_20_0,
								"arduinoML.concretesyntax.ArduinoML.Time_unit");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_21='then'
				{
					newLeafNode(otherlv_21, grammarAccess.getTransitionStateAccess().getThenKeyword_0_1_3());
				}
			)
		)
		otherlv_22='go'
		{
			newLeafNode(otherlv_22, grammarAccess.getTransitionStateAccess().getGoKeyword_1());
		}
		otherlv_23='to'
		{
			newLeafNode(otherlv_23, grammarAccess.getTransitionStateAccess().getToKeyword_2());
		}
		otherlv_24='state'
		{
			newLeafNode(otherlv_24, grammarAccess.getTransitionStateAccess().getStateKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionStateRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTransitionStateAccess().getNext_stateStateCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTransitionMode
entryRuleTransitionMode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionModeRule()); }
	iv_ruleTransitionMode=ruleTransitionMode
	{ $current=$iv_ruleTransitionMode.current; }
	EOF;

// Rule TransitionMode
ruleTransitionMode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='when'
				{
					newLeafNode(otherlv_0, grammarAccess.getTransitionModeAccess().getWhenKeyword_0_0_0());
				}
				(
					(
						(
							(
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getTransitionModeRule());
									}
								}
								{
									newCompositeNode(grammarAccess.getTransitionModeAccess().getDigitalsDigitalCrossReference_0_0_1_0_0_0());
								}
								ruleEString
								{
									afterParserOrEnumRuleCall();
								}
							)
						)
						otherlv_2='is'
						{
							newLeafNode(otherlv_2, grammarAccess.getTransitionModeAccess().getIsKeyword_0_0_1_0_1());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getTransitionModeAccess().getD_valuesSignalEnumRuleCall_0_0_1_0_2_0());
								}
								lv_d_values_3_0=ruleSignal
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
									}
									add(
										$current,
										"d_values",
										lv_d_values_3_0,
										"arduinoML.concretesyntax.ArduinoML.Signal");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
					    |
					(
						(
							(
								{
									if ($current==null) {
										$current = createModelElement(grammarAccess.getTransitionModeRule());
									}
								}
								{
									newCompositeNode(grammarAccess.getTransitionModeAccess().getAnalogsAnalogCrossReference_0_0_1_1_0_0());
								}
								ruleEString
								{
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getTransitionModeAccess().getCompCompareEnumRuleCall_0_0_1_1_1_0());
								}
								lv_comp_5_0=ruleCompare
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
									}
									add(
										$current,
										"comp",
										lv_comp_5_0,
										"arduinoML.concretesyntax.ArduinoML.Compare");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getTransitionModeAccess().getA_valuesEIntParserRuleCall_0_0_1_1_2_0());
								}
								lv_a_values_6_0=ruleEInt
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
									}
									add(
										$current,
										"a_values",
										lv_a_values_6_0,
										"arduinoML.concretesyntax.ArduinoML.EInt");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
				(
					otherlv_7='and'
					{
						newLeafNode(otherlv_7, grammarAccess.getTransitionModeAccess().getAndKeyword_0_0_2_0());
					}
					(
						(
							(
								(
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getTransitionModeRule());
										}
									}
									{
										newCompositeNode(grammarAccess.getTransitionModeAccess().getDigitalsDigitalCrossReference_0_0_2_1_0_0_0());
									}
									ruleEString
									{
										afterParserOrEnumRuleCall();
									}
								)
							)
							otherlv_9='is'
							{
								newLeafNode(otherlv_9, grammarAccess.getTransitionModeAccess().getIsKeyword_0_0_2_1_0_1());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getTransitionModeAccess().getD_valuesSignalEnumRuleCall_0_0_2_1_0_2_0());
									}
									lv_d_values_10_0=ruleSignal
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
										}
										add(
											$current,
											"d_values",
											lv_d_values_10_0,
											"arduinoML.concretesyntax.ArduinoML.Signal");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)
						    |
						(
							(
								(
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getTransitionModeRule());
										}
									}
									{
										newCompositeNode(grammarAccess.getTransitionModeAccess().getAnalogsAnalogCrossReference_0_0_2_1_1_0_0());
									}
									ruleEString
									{
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								(
									{
										newCompositeNode(grammarAccess.getTransitionModeAccess().getCompCompareEnumRuleCall_0_0_2_1_1_1_0());
									}
									lv_comp_12_0=ruleCompare
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
										}
										add(
											$current,
											"comp",
											lv_comp_12_0,
											"arduinoML.concretesyntax.ArduinoML.Compare");
										afterParserOrEnumRuleCall();
									}
								)
							)
							(
								(
									{
										newCompositeNode(grammarAccess.getTransitionModeAccess().getA_valuesEIntParserRuleCall_0_0_2_1_1_2_0());
									}
									lv_a_values_13_0=ruleEInt
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
										}
										add(
											$current,
											"a_values",
											lv_a_values_13_0,
											"arduinoML.concretesyntax.ArduinoML.EInt");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)
					)
				)*
				(
					otherlv_14='wait'
					{
						newLeafNode(otherlv_14, grammarAccess.getTransitionModeAccess().getWaitKeyword_0_0_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getTransitionModeAccess().getTimeEIntParserRuleCall_0_0_3_1_0());
							}
							lv_time_15_0=ruleEInt
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
								}
								set(
									$current,
									"time",
									lv_time_15_0,
									"arduinoML.concretesyntax.ArduinoML.EInt");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getTransitionModeAccess().getUnitTime_unitEnumRuleCall_0_0_3_2_0());
							}
							lv_unit_16_0=ruleTime_unit
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
								}
								set(
									$current,
									"unit",
									lv_unit_16_0,
									"arduinoML.concretesyntax.ArduinoML.Time_unit");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_17='then'
					{
						newLeafNode(otherlv_17, grammarAccess.getTransitionModeAccess().getThenKeyword_0_0_3_3());
					}
				)?
			)
			    |
			(
				otherlv_18='wait'
				{
					newLeafNode(otherlv_18, grammarAccess.getTransitionModeAccess().getWaitKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getTransitionModeAccess().getTimeEIntParserRuleCall_0_1_1_0());
						}
						lv_time_19_0=ruleEInt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
							}
							set(
								$current,
								"time",
								lv_time_19_0,
								"arduinoML.concretesyntax.ArduinoML.EInt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getTransitionModeAccess().getUnitTime_unitEnumRuleCall_0_1_2_0());
						}
						lv_unit_20_0=ruleTime_unit
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTransitionModeRule());
							}
							set(
								$current,
								"unit",
								lv_unit_20_0,
								"arduinoML.concretesyntax.ArduinoML.Time_unit");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_21='then'
				{
					newLeafNode(otherlv_21, grammarAccess.getTransitionModeAccess().getThenKeyword_0_1_3());
				}
			)
		)
		otherlv_22='go'
		{
			newLeafNode(otherlv_22, grammarAccess.getTransitionModeAccess().getGoKeyword_1());
		}
		otherlv_23='to'
		{
			newLeafNode(otherlv_23, grammarAccess.getTransitionModeAccess().getToKeyword_2());
		}
		otherlv_24='mode'
		{
			newLeafNode(otherlv_24, grammarAccess.getTransitionModeAccess().getModeKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTransitionModeRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getTransitionModeAccess().getNext_modeModeCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule Signal
ruleSignal returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='HIGH'
			{
				$current = grammarAccess.getSignalAccess().getHIGHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSignalAccess().getHIGHEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='LOW'
			{
				$current = grammarAccess.getSignalAccess().getLOWEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSignalAccess().getLOWEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Time_unit
ruleTime_unit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='ms'
			{
				$current = grammarAccess.getTime_unitAccess().getMsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTime_unitAccess().getMsEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='s'
			{
				$current = grammarAccess.getTime_unitAccess().getSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTime_unitAccess().getSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='min'
			{
				$current = grammarAccess.getTime_unitAccess().getMinEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTime_unitAccess().getMinEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Compare
ruleCompare returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='inf'
			{
				$current = grammarAccess.getCompareAccess().getInfEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompareAccess().getInfEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='einf'
			{
				$current = grammarAccess.getCompareAccess().getEinfEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompareAccess().getEinfEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='equal'
			{
				$current = grammarAccess.getCompareAccess().getEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompareAccess().getEqualEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='esup'
			{
				$current = grammarAccess.getCompareAccess().getEsupEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompareAccess().getEsupEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='sup'
			{
				$current = grammarAccess.getCompareAccess().getSupEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCompareAccess().getSupEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
