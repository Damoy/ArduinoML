/*
 * generated by Xtext 2.16.0
 */
package arduinoML.concretesyntax.serializer;

import arduinoML.Actuator;
import arduinoML.Analog;
import arduinoML.AppMode;
import arduinoML.AppState;
import arduinoML.ArduinoMLPackage;
import arduinoML.Digital;
import arduinoML.Mode;
import arduinoML.State;
import arduinoML.TransitionMode;
import arduinoML.TransitionState;
import arduinoML.concretesyntax.services.ArduinoMLGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ArduinoMLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ArduinoMLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ArduinoMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ArduinoMLPackage.ACTION:
				sequence_Action(context, (arduinoML.Action) semanticObject); 
				return; 
			case ArduinoMLPackage.ACTUATOR:
				if (rule == grammarAccess.getActuatorRule()) {
					sequence_Actuator(context, (Actuator) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBrickRule()) {
					sequence_Actuator_Brick(context, (Actuator) semanticObject); 
					return; 
				}
				else break;
			case ArduinoMLPackage.ANALOG:
				if (rule == grammarAccess.getAnalogRule()) {
					sequence_Analog(context, (Analog) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBrickRule()) {
					sequence_Analog_Brick(context, (Analog) semanticObject); 
					return; 
				}
				else break;
			case ArduinoMLPackage.APP_MODE:
				sequence_AppMode(context, (AppMode) semanticObject); 
				return; 
			case ArduinoMLPackage.APP_STATE:
				sequence_AppState(context, (AppState) semanticObject); 
				return; 
			case ArduinoMLPackage.DIGITAL:
				if (rule == grammarAccess.getBrickRule()) {
					sequence_Brick_Digital(context, (Digital) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDigitalRule()) {
					sequence_Digital(context, (Digital) semanticObject); 
					return; 
				}
				else break;
			case ArduinoMLPackage.MODE:
				sequence_Mode(context, (Mode) semanticObject); 
				return; 
			case ArduinoMLPackage.STATE:
				sequence_State(context, (State) semanticObject); 
				return; 
			case ArduinoMLPackage.TRANSITION_MODE:
				sequence_TransitionMode(context, (TransitionMode) semanticObject); 
				return; 
			case ArduinoMLPackage.TRANSITION_STATE:
				sequence_TransitionState(context, (TransitionState) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (actuator=[Actuator|EString] value=Signal)
	 */
	protected void sequence_Action(ISerializationContext context, arduinoML.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinoMLPackage.Literals.ACTION__ACTUATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinoMLPackage.Literals.ACTION__ACTUATOR));
			if (transientValues.isValueTransient(semanticObject, ArduinoMLPackage.Literals.ACTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinoMLPackage.Literals.ACTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getActuatorActuatorEStringParserRuleCall_1_0_1(), semanticObject.eGet(ArduinoMLPackage.Literals.ACTION__ACTUATOR, false));
		feeder.accept(grammarAccess.getActionAccess().getValueSignalEnumRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     {Actuator}
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Brick returns Actuator
	 *
	 * Constraint:
	 *     (name=EString pin=EInt)
	 */
	protected void sequence_Actuator_Brick(ISerializationContext context, Actuator semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinoMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinoMLPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ArduinoMLPackage.Literals.BRICK__PIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinoMLPackage.Literals.BRICK__PIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBrickAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBrickAccess().getPinEIntParserRuleCall_3_0(), semanticObject.getPin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Analog returns Analog
	 *
	 * Constraint:
	 *     {Analog}
	 */
	protected void sequence_Analog(ISerializationContext context, Analog semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Brick returns Analog
	 *
	 * Constraint:
	 *     (name=EString pin=EInt)
	 */
	protected void sequence_Analog_Brick(ISerializationContext context, Analog semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinoMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinoMLPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ArduinoMLPackage.Literals.BRICK__PIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinoMLPackage.Literals.BRICK__PIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBrickAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBrickAccess().getPinEIntParserRuleCall_3_0(), semanticObject.getPin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     App returns AppMode
	 *     AppMode returns AppMode
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         initial_mode=[Mode|EString] 
	 *         bricks+=Brick 
	 *         bricks+=Brick* 
	 *         modes+=Mode 
	 *         modes+=Mode*
	 *     )
	 */
	protected void sequence_AppMode(ISerializationContext context, AppMode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     App returns AppState
	 *     AppState returns AppState
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         initial_state=[State|EString] 
	 *         bricks+=Brick 
	 *         bricks+=Brick* 
	 *         states+=State 
	 *         states+=State*
	 *     )
	 */
	protected void sequence_AppState(ISerializationContext context, AppState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Brick returns Digital
	 *
	 * Constraint:
	 *     (name=EString pin=EInt)
	 */
	protected void sequence_Brick_Digital(ISerializationContext context, Digital semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ArduinoMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinoMLPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ArduinoMLPackage.Literals.BRICK__PIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ArduinoMLPackage.Literals.BRICK__PIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBrickAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getBrickAccess().getPinEIntParserRuleCall_3_0(), semanticObject.getPin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Digital returns Digital
	 *
	 * Constraint:
	 *     {Digital}
	 */
	protected void sequence_Digital(ISerializationContext context, Digital semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mode returns Mode
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         initial=[State|EString] 
	 *         (bricks+=Brick bricks+=Brick*)? 
	 *         states+=State 
	 *         states+=State* 
	 *         transitions_mode+=TransitionMode 
	 *         transitions_mode+=TransitionMode*
	 *     )
	 */
	protected void sequence_Mode(ISerializationContext context, Mode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     State returns State
	 *
	 * Constraint:
	 *     (name=EString actions+=Action actions+=Action* transitions_state+=TransitionState transitions_state+=TransitionState*)
	 */
	protected void sequence_State(ISerializationContext context, State semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns TransitionMode
	 *     TransitionMode returns TransitionMode
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 ((digitals+=[Digital|EString] d_values+=Signal) | (analogs+=[Analog|EString] comp+=Compare a_values+=EInt)) 
	 *                 ((digitals+=[Digital|EString] d_values+=Signal)? (analogs+=[Analog|EString] comp+=Compare a_values+=EInt)?)+ 
	 *                 (time=EInt unit=Time_unit)?
	 *             ) | 
	 *             (time=EInt unit=Time_unit)
	 *         ) 
	 *         next_mode=[Mode|EString]
	 *     )
	 */
	protected void sequence_TransitionMode(ISerializationContext context, TransitionMode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns TransitionState
	 *     TransitionState returns TransitionState
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 ((digitals+=[Digital|EString] d_values+=Signal) | (analogs+=[Analog|EString] comp+=Compare a_values+=EInt)) 
	 *                 ((digitals+=[Digital|EString] d_values+=Signal)? (analogs+=[Analog|EString] comp+=Compare a_values+=EInt)?)+ 
	 *                 (time=EInt unit=Time_unit)?
	 *             ) | 
	 *             (time=EInt unit=Time_unit)
	 *         ) 
	 *         next_state=[State|EString]
	 *     )
	 */
	protected void sequence_TransitionState(ISerializationContext context, TransitionState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
