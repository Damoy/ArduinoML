// Code generated by ArduinoML
// Structural concepts
void setup() {
	pinMode(1, INPUT);
	pinMode(10, OUTPUT);
	pinMode(11, OUTPUT);
	pinMode(8, INPUT);
	pinMode(9, INPUT);
	Serial.begin(38400);
	Serial.println("name=ModePresentation");
	Serial.println("modes=resterAppuyer,transitionTemporelle,multiEtats,detectionLumiere");
	Serial.println("states=mode1_off,mode1_on");
	Serial.println("states=mode2_off,mode2_on");
	Serial.println("states=mode3_off,mode3_on_1,mode3_on_2");
	Serial.println("states=mode4_off,mode4_on");
}

//Monitoring values
String state_value = "";
String mode_value = "";

//Behavioral concepts
long time=0;
long debounce = 200;
long analog=0;

void mode_resterAppuyer() {
	//initial state
	mode_value = "0";
	state_value = "0";
	Serial.println("mode=" + mode_value + " " + "state=" + state_value);
	state_mode1_off();
}

void resterAppuyer_to_transitionTemporelle(){
	boolean guard = millis() - time > debounce;
	if( analogRead(1) >= 500 && guard ) {
		time = millis();
		mode_transitionTemporelle();
	}
}
void resterAppuyer_to_multiEtats(){
	boolean guard = millis() - time > debounce;
	if( digitalRead(8) == HIGH && guard ) {
		time = millis();
		mode_multiEtats();
	}
}
void state_mode1_off() {
	digitalWrite(10, LOW);
	digitalWrite(11, LOW);
	boolean guard = millis() - time > debounce;
	out_resterAppuyer();

	resterAppuyer_to_transitionTemporelle();
	resterAppuyer_to_multiEtats();
	if( digitalRead(9) == HIGH && guard ) {
		state_value = "1";
		out();
		time = millis();
		state_mode1_on();
	}
	else {
		state_mode1_off(); 
	}
}

void state_mode1_on() {
	digitalWrite(11, HIGH);
	boolean guard = millis() - time > debounce;
	out_resterAppuyer();

	resterAppuyer_to_transitionTemporelle();
	resterAppuyer_to_multiEtats();
	if( digitalRead(9) == LOW && guard ) {
		state_value = "0";
		out();
		time = millis();
		state_mode1_off();
	}
	else {
		state_mode1_on(); 
	}
}

void mode_transitionTemporelle() {
	//initial state
	mode_value = "1";
	state_value = "0";
	Serial.println("mode=" + mode_value + " " + "state=" + state_value);
	state_mode2_off();
}

void transitionTemporelle_to_resterAppuyer(){
	boolean guard = millis() - time > debounce;
	if( analogRead(1) < 500 && guard ) {
		time = millis();
		mode_resterAppuyer();
	}
}
void transitionTemporelle_to_detectionLumiere(){
	boolean guard = millis() - time > debounce;
	if( digitalRead(8) == HIGH && guard ) {
		time = millis();
		mode_detectionLumiere();
	}
}
void state_mode2_off() {
	digitalWrite(10, LOW);
	digitalWrite(11, LOW);
	boolean guard = millis() - time > debounce;
	out_transitionTemporelle();

	transitionTemporelle_to_resterAppuyer();
	transitionTemporelle_to_detectionLumiere();
	if( digitalRead(9) == HIGH && guard ) {
		state_value = "1";
		out();
		time = millis();
		state_mode2_on();
	}
	else {
		state_mode2_off(); 
	}
}

void state_mode2_on() {
	digitalWrite(11, HIGH);
	boolean guard = millis() - time > debounce;
	out_transitionTemporelle();

	transitionTemporelle_to_resterAppuyer();
	transitionTemporelle_to_detectionLumiere();
	delay(1000);
	state_value = "0";
	out();
	state_mode2_off();
}

void mode_multiEtats() {
	//setup bricks
	pinMode(12, OUTPUT);
	//initial state
	mode_value = "2";
	state_value = "0";
	Serial.println("mode=" + mode_value + " " + "state=" + state_value);
	state_mode3_off();
}

void reset_multiEtats() {
	digitalWrite(12, LOW);
}

void multiEtats_to_detectionLumiere(){
	boolean guard = millis() - time > debounce;
	if( analogRead(1) >= 500 && guard ) {
		reset_multiEtats();
		time = millis();
		mode_detectionLumiere();
	}
}
void multiEtats_to_resterAppuyer(){
	boolean guard = millis() - time > debounce;
	if( digitalRead(8) == HIGH && guard ) {
		reset_multiEtats();
		time = millis();
		mode_resterAppuyer();
	}
}
void state_mode3_off() {
	digitalWrite(10, HIGH);
	digitalWrite(12, LOW);
	boolean guard = millis() - time > debounce;
	out_multiEtats();

	multiEtats_to_detectionLumiere();
	multiEtats_to_resterAppuyer();
	if( digitalRead(9) == HIGH && guard ) {
		state_value = "1";
		out();
		time = millis();
		state_mode3_on_1();
	}
	else {
		state_mode3_off(); 
	}
}

void state_mode3_on_1() {
	digitalWrite(11, HIGH);
	boolean guard = millis() - time > debounce;
	out_multiEtats();

	multiEtats_to_detectionLumiere();
	multiEtats_to_resterAppuyer();
	if( digitalRead(9) == HIGH && guard ) {
		state_value = "2";
		out();
		time = millis();
		state_mode3_on_2();
	}
	else {
		state_mode3_on_1(); 
	}
}

void state_mode3_on_2() {
	digitalWrite(11, LOW);
	digitalWrite(12, HIGH);
	boolean guard = millis() - time > debounce;
	out_multiEtats();

	multiEtats_to_detectionLumiere();
	multiEtats_to_resterAppuyer();
	if( digitalRead(9) == HIGH && guard ) {
		state_value = "0";
		out();
		time = millis();
		state_mode3_off();
	}
	else {
		state_mode3_on_2(); 
	}
}

void mode_detectionLumiere() {
	//setup bricks
	pinMode(2, INPUT);
	//initial state
	mode_value = "3";
	state_value = "0";
	Serial.println("mode=" + mode_value + " " + "state=" + state_value);
	state_mode4_off();
}

void detectionLumiere_to_multiEtats(){
	boolean guard = millis() - time > debounce;
	if( analogRead(1) < 500 && guard ) {
		time = millis();
		mode_multiEtats();
	}
}
void detectionLumiere_to_transitionTemporelle(){
	boolean guard = millis() - time > debounce;
	if( digitalRead(8) == HIGH && guard ) {
		time = millis();
		mode_transitionTemporelle();
	}
}
void state_mode4_off() {
	digitalWrite(10, HIGH);
	digitalWrite(11, LOW);
	boolean guard = millis() - time > debounce;
	out_detectionLumiere();

	detectionLumiere_to_multiEtats();
	detectionLumiere_to_transitionTemporelle();
	if( analogRead(2) >= 600 && guard ) {
		state_value = "1";
		out();
		time = millis();
		state_mode4_on();
	}
	else {
		state_mode4_off(); 
	}
}

void state_mode4_on() {
	digitalWrite(11, HIGH);
	boolean guard = millis() - time > debounce;
	out_detectionLumiere();

	detectionLumiere_to_multiEtats();
	detectionLumiere_to_transitionTemporelle();
	if( analogRead(2) < 600 && guard ) {
		state_value = "0";
		out();
		time = millis();
		state_mode4_off();
	}
	else {
		state_mode4_on(); 
	}
}

void out() {Serial.println("state=" + state_value);}

void out_resterAppuyer() {
	boolean time_analog = millis() - analog > debounce;
	if (time_analog) {
		Serial.println("analog=potentiometre->" + String(analogRead(1)));
		analog = millis();
	}
}

void out_transitionTemporelle() {
	boolean time_analog = millis() - analog > debounce;
	if (time_analog) {
		Serial.println("analog=potentiometre->" + String(analogRead(1)));
		analog = millis();
	}
}

void out_multiEtats() {
	boolean time_analog = millis() - analog > debounce;
	if (time_analog) {
		Serial.println("analog=potentiometre->" + String(analogRead(1)));
		analog = millis();
	}
}

void out_detectionLumiere() {
	boolean time_analog = millis() - analog > debounce;
	if (time_analog) {
		Serial.println("analog=potentiometre->" + String(analogRead(1)) + "=lumiere->" + String(analogRead(2)));
		analog = millis();
	}
}

void loop() {mode_resterAppuyer();} // Entering init mode