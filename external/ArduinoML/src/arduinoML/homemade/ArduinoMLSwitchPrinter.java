package arduinoML.homemade;

import arduinoML.*;

import arduinoML.util.ArduinoMLSwitch;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see arduinoML.ArduinoMLPackage
 * 
 */
public class ArduinoMLSwitchPrinter extends ArduinoMLSwitch<String> {
	String etat = "";
	int if_counter;
	public ArduinoMLSwitchPrinter() {
		if (modelPackage == null) {
			modelPackage = ArduinoMLPackage.eINSTANCE;
		}
	}


	/**
	 * Returns the result of interpreting the object as an instance of '<em>Brick</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Brick</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * 
	 */
	public String caseBrick(Brick object) {
		return "";
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Actuator</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Actuator</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * 
	 */
	public String caseActuator(Actuator object) {
		if (object.getPin() >= 0 && object.getPin() <= 19) {
			return "\tpinMode("+object.getPin()+", OUTPUT);\n";
		}
		return "\t// ERROR OUTPUT : pin " + object.getPin() + " doesn't exist !\n";
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Analog</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Analog</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * 
	 */
	public String caseAnalog(Analog object) {
		if (object.getPin() >= 0 && object.getPin() <= 19) {
			return "\tpinMode("+object.getPin()+", INPUT);\n";
		}
		return "\t// ERROR INPUT : pin " + object.getPin() + " doesn't exist !\n";
	}
	
	/**
	 * Returns the result of interpreting the object as an instance of '<em>Digital</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Digital</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * 
	 */
	public String caseDigital(Digital object) {
		if (object.getPin() >= 0 && object.getPin() <= 19) {
			return "\tpinMode("+object.getPin()+", INPUT);\n";
		}
		return "\t// ERROR INPUT : pin " + object.getPin() + " doesn't exist !\n";
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>App</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>App</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * 
	 */
	public String caseApp(App object) {
		StringBuilder sb = new StringBuilder();
		sb.append("// Code generated by ArduinoML\n"
				+ "// Structural concepts\n"
				+ "void setup() {\n");
		for(Brick b : object.getBricks()) {
			sb.append(doSwitch(b));
		}
		sb.append("}\n\n"
				+ "//Behavioral concepts\n"
				+ "long time=0; long debounce = 200;\n\n");
		if (!object.getStates().isEmpty()) {
			for(State s : object.getStates())
				sb.append(doSwitch(s));
			sb.append("void loop() {state_"+object.getInitial_state().getName()+"();} // Entering init state");
		} else {
			for(Mode m : object.getModes()) {
				etat = m.getName();
				sb.append(doSwitch(m));
			}
			sb.append("void loop() {mode_"+object.getInitial_mode().getName()+"();} // Entering init mode");
		}
		return sb.toString();
	}
	
	/**
	 * Returns the result of interpreting the object as an instance of '<em>Mode</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Mode</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * 
	 */
	public String caseMode(Mode object) {
		StringBuilder sb = new StringBuilder();
		sb.append("void mode_"+object.getName()+"() {\n");
		sb.append("\t//setup bricks\n");
		for(Brick b : object.getBricks()) {
			sb.append(doSwitch(b));
		}
		sb.append("\t//initial state\n");
		sb.append("\tstate_" + object.getInitial().getName() + "();\n");
		sb.append("}\n\n");
		
		sb.append("void reset_" + object.getName() + "() {\n"); 
		for (Brick b : object.getBricks()) {
			if(b instanceof Actuator){
			    sb.append("\tdigitalWrite(" + b.getPin() + ", LOW);\n"); 
			}
		}
		sb.append("}\n\n");
		
		for(State s : object.getStates()) {
			sb.append(doSwitch(s));
		}
		return sb.toString();
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>State</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>State</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * 
	 */
	public String caseState(State object) {
		if_counter = 0;
		StringBuilder sb = new StringBuilder();
		sb.append("void state_"+object.getName()+"() {\n");
		for(Action a : object.getActions())
			sb.append(doSwitch(a));
		sb.append("\tboolean guard = millis() - time > debounce;\n");
		for(Transition t : object.getTransitions()) {
			sb.append(doSwitch(t));
		}
		if (if_counter != 0) {
			sb.append("\telse {\n\t\tstate_"+object.getTransitions().get(0).getState().getName()+"(); \n\t}\n");
		}
		sb.append("}\n\n");
		return sb.toString();
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Action</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Action</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * 
	 */
	public String caseAction(Action object) {
		StringBuilder sb = new StringBuilder();
		sb.append("\tdigitalWrite("
				+object.getActuator().getPin()
				+", "+object.getValue().getLiteral()
				+");\n");
		return sb.toString();
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>Transition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>Transition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * 
	 */
	public String caseTransition(Transition object) {
		StringBuilder sb = new StringBuilder();
		if (!object.getDigitals().isEmpty() || !object.getAnalogs().isEmpty()) {
			if_counter++;
			
			if (!object.getDigitals().isEmpty()) {
				sb.append("\tif( digitalRead(" + object.getDigitals().get(0).getPin() + ") == " + object.getD_values().get(0).getLiteral());
			
				if (object.getDigitals().size() > 1) {
					for (int i = 1; i < object.getDigitals().size(); i++) {
						sb.append(" && digitalRead(" + object.getDigitals().get(i).getPin() + ") == " + object.getD_values().get(i).getLiteral());
					}
				}
				
				if (object.getAnalogs().size() > 0) {
					for (int i = 0; i < object.getAnalogs().size(); i++) {
						sb.append(" && analogRead(" + object.getAnalogs().get(i).getPin() + ") " +  comparateur(object.getComp().get(i).getValue()) + " " +  object.getA_values().get(i));
					}
				}
				
			}
			else {
				sb.append("\tif( analogRead(" + object.getAnalogs().get(0).getPin() + ") " +  comparateur(object.getComp().get(0).getValue()) + " " + object.getA_values().get(0));
				if (object.getAnalogs().size() > 1) {
					for (int i = 1; i < object.getAnalogs().size(); i++) {
						sb.append(" && analogRead(" + object.getAnalogs().get(i).getPin() + ") " +  comparateur(object.getComp().get(i).getValue()) + " " +  object.getA_values().get(i));
					}
				}
			}
			sb.append(" && guard ) {\n");
			if(object.getUnit() != null) {
				sb.append("\t\tdelay("+ Math.abs(object.getTime()) * object.getUnit().getValue() + ");\n");
			}
			if (object.getNext_state() != null) {
				sb.append("\t\ttime = millis();\n\t\tstate_"+object.getNext_state().getName()+"();\n\t}\n");
			}
			else {
				sb.append("\t\treset_" + etat + "();\n");
				sb.append("\t\ttime = millis();\n\t\tmode_"+object.getNext_mode().getName()+"();\n\t}\n");
			}
			
			
		}
		else {
			if(if_counter != 0) {
				sb.append("\tif (true) {\n"	+ "\t\tdelay(" + Math.abs(object.getTime()) * object.getUnit().getValue() + ");\n");
				if (object.getNext_state() != null) {
					sb.append("\t\tstate_" + object.getNext_state().getName() + "();\n\t}\n");
				}
				else {
					sb.append("\t\treset_" + etat + "();\n");
					sb.append("\t\tmode_" + object.getNext_mode().getName() + "();\n\t}\n");
				}
			}
			else {
				sb.append("\tdelay(" + Math.abs(object.getTime()) * object.getUnit().getValue() + ");\n");
				if (object.getNext_state() != null) {
					sb.append("\tstate_" + object.getNext_state().getName() + "();\n");
				}
				else {
					sb.append("\t\treset_" + etat + "();\n");
					sb.append("\tmode_" + object.getNext_mode().getName() + "();\n");
				}
			}
		}
		return sb.toString();
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * 
	 */
	@Override
	public String defaultCase(EObject object) {
		return "";
	}
	
	private String comparateur(int comp) {
		String res = "ERROR";
		switch (comp) {
			case 0: res = "<";
					break;
			case 1: res = "<=";
					break;
			case 2: res = "==";
					break;
			case 3: res = ">=";
					break;
			case 4: res = ">";
					break;
			default: break;
		}
		return res;
	}

} //ArduinoMLSwitch
